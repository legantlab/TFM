function []=processGreensMesh(filestem,inputfile,vectorfile,distFromCellBead,multiple_time_pts,varargin)

%Input argument definitions
% filestem = a string indicating the directory where the datafiles are located
% inputfile = a string indicating the name of the inputfile containing the 2D and 3D node coordinates and element connectivity
% vectorfile = the name of the datafile storing the vector bead displacement data
% distFromCellBead = the distance from the cell for which to include beads in the calculation of the discretized Greens function
% multiple_time_pts = a boolean indicating whether or not to analyze multiple time points (0 is single time point, 1 is multiple timepoints)
% varargin
%     1) index of the first time point to analyze
%     2) number of additional time points to analyze

if multiple_time_pts==1
    time_pt=varargin{1};
    num_time_pts=varargin{2};
    disp(['Will process ', num2str(num_time_pts-time_pt+1),' time points'])
else
    time_pt=1;
    num_time_pts=1;
    disp('Processing single time point')
end

for i=time_pt:num_time_pts
    eval(strcat('load ''',filestem,vectorfile,num2str(i,'%02.0f'),'.mat'''));
    eval(['filetext = fileread(''',filestem,inputfile,num2str(i,'%02.0f'),'.inp'');'])
    [data,triElemStart] = regexp(filetext, 'ELEMENT,TYPE=S3', 'match');
    [data,tetElemStart] = regexp(filetext, 'ELEMENT,TYPE=C3D4', 'match');
    [data,boundaryStart]= regexp(filetext, 'NSET=BOUNDARY', 'match');
    [node_index] = regexp(filetext(1:triElemStart), '\s+\d+[\x2C\s]+[\x2D\dE\.]+[\x2C\s]+[\x2D\dE\.]+[\x2C\s]+[\x2D\dE\.]+[\r\n]?', 'match');
    nodeList=str2num(cell2mat(node_index));
    eval(['dlmwrite([filestem,''nodeList_m2r_',num2str(i,'%02.0f'),'.txt''],nodeList,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.5f'')']);
    [triElem_index] = regexp(filetext(triElemStart:tetElemStart), '\s+\d+[\x2C\s]+[\x2D\dE\.]+[\x2C\s]+[\x2D\dE\.]+[\x2C\s]+[\x2D\dE\.]+[\r\n]?', 'match');
    voidElemConn=str2num(cell2mat(triElem_index));
    eval(['dlmwrite([filestem,''voidElemConn_m2r_',num2str(i,'%02.0f'),'.txt''],voidElemConn,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')']);
    [tetElem_index] = regexp(filetext(tetElemStart:boundaryStart), '\s+\d+[\x2C\s]+\d+[\x2C\s]+\d+[\x2C\s]+\d+[\x2C\s]+\d+[\r\n]', 'match');
    elemList=str2num(cell2mat(tetElem_index));
    eval(['dlmwrite([filestem,''elemList_m2r_',num2str(i,'%02.0f'),'.txt''],elemList,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')']);
    [boundary_index] = regexp(filetext(boundaryStart:end), '\s+\d+[\x2C\r\n]', 'match');
    eval(['[repElems,beadCoords,elemCheck]=point_in_tet(',vectorfile,num2str(i,'%02.0f'),'(',vectorfile,num2str(i,'%02.0f'),'(:,8)<=distFromCellBead,1:3),elemList,nodeList);'])
    eval(['dlmwrite([filestem,''repElems_',num2str(distFromCellBead),'umFromCell_m2r_',num2str(i,'%02.0f'),'.txt''],repElems,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')'])
    eval(['dlmwrite([filestem,''beadCoords_',num2str(distFromCellBead),'umFromCell_m2r_',num2str(i,'%02.0f'),'.txt''],beadCoords,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.5f'')'])
    eval(['dlmwrite([filestem,''elemCheck_',num2str(distFromCellBead),'umFromCell_m2r_',num2str(i,'%02.0f'),'.txt''],elemCheck,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')'])
    [repNodes]=reportNodeFind(repElems,elemList);
    eval(['dlmwrite([filestem,''repNodes_',num2str(distFromCellBead),'umFromCell_m2r_',num2str(i,'%02.0f'),'.txt''],repNodes,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')']);
    [voidElems,voidElemFaces]=voidFaceFind(elemList,voidElemConn);
    eval(['dlmwrite([filestem,''voidElems_',num2str(i,'%02.0f'),'.txt''],voidElems,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')']);
    eval(['dlmwrite([filestem,''voidElemFaces_',num2str(i,'%02.0f'),'.txt''],voidElemFaces,''delimiter'', '','', ''newline'',''pc'',''precision'',''%10.0f'')']);
    
    eval(['fid = fopen([filestem,''abaqusGreensFunction_',num2str(i,'%02.0f'),'.inp''], ''w'')']);
    fprintf(fid,'*Heading\r\n** Job name: abaqusGREENS Model name: 3DTFM\r\n** Generated by: Abaqus/CAE Version 6.8-3\r\n*Preprint, echo=NO, model=NO, history=NO, contact=NO\r\n**\r\n** PARTS\r\n**\r\n*Part, name=PART-1\r\n*Node');
    fprintf(fid,cell2mat(node_index));
    fprintf(fid,'\r\n*Element, type=C3D4');
    fprintf(fid,cell2mat(tetElem_index));
    fprintf(fid,['\r\n*Elset, elset=GEL, generate\r\n       1, ',num2str(length(elemList)),', 1\r\n** Section: Section-1-GEL\r\n*Solid Section, elset=GEL, material=PEG\r\n*End Part\r\n**\r\n** ASSEMBLY\r\n**\r\n*Assembly, name=Assembly\r\n**\r\n*Instance, name=PART-1-1, part=PART-1\r\n*End Instance\r\n**\r\n']);
    fprintf(fid,['*Nset, nset=BOUNDARY, instance=PART-1-1',cell2mat(boundary_index),'\r\n']);
    fprintf(fid,'*Nset, nset=repNODES, instance=PART-1-1\r\n');
    
    for i=1:length(repNodes)
        fprintf(fid,[num2str(repNodes(i)),',']);
        if mod(i,16)==15;
            fprintf(fid,'\r\n');
        end
    end
    
    fprintf(fid,'\r\n');
    [numVoidElems,cols]=size(voidElemConn);
    numLoadCase=50;
    numSteps=numVoidElems/numLoadCase;
    numResidual=numVoidElems-numSteps*numLoadCase;
    
    for i=1:numVoidElems
        fprintf(fid,['*Elset, elset=elemfacet',num2str(i),', instance=PART-1-1\r\n', num2str(voidElems(i)),',\r\n*Surface, type=ELEMENT, name=facet',num2str(i),', internal\r\nelemfacet',num2str(i),',S',num2str(voidElemFaces(i)),'\r\n']);
    end
    
    fprintf(fid,'*End Assembly\r\n**\r\n** MATERIALS\r\n**\r\n*Material, name=PEG\r\n*Elastic\r\n1, 0.49\r\n** ----------------------------------------------------------------\r\n**');
    
    for k=1:numSteps
        fprintf(fid,['\r\n** STEP: Step-',num2str(k),'\r\n**\r\n*Step, Perturbation, name=Step-',num2str(k),', nlgeom=NO\r\n*Static\r\n1., 1., 1e-05, 1.\r\n**\r\n** BOUNDARY CONDITIONS\r\n**\r\n** Name: BC-1 Type: Symmetry/Antisymmetry/Encastre\r\n*Boundary\r\nBOUNDARY, ENCASTRE\r\n**']);
        t=1;
        for i=1:numLoadCase
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 1,0,0\r\n**\r\n*END LOAD CASE\r\n**']);
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t+1),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 0,1,0\r\n**\r\n*END LOAD CASE\r\n**']);
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t+2),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 0,0,1\r\n**\r\n*END LOAD CASE\r\n**']);
            t=t+3;
        end
        fprintf(fid,['\r\n** OUTPUT REQUESTS\r\n*OUTPUT, HISTORY, Frequency=0\r\n*OUTPUT, FIELD, Frequency=0\r\n**\r\n*NODE PRINT, NSET=repNODES, SUMMARY=NO\r\nU1, U2, U3, COORD,\r\n**\r\n*END STEP\r\n**']);
    end
    
    if numResidual>0
        k=numSteps+1;
        fprintf(fid,['\r\n** STEP: Step-',num2str(k),'\r\n**\r\n*Step, Perturbation, name=Step-',num2str(k),', nlgeom=NO\r\n*Static\r\n1., 1., 1e-05, 1.\r\n**\r\n** BOUNDARY CONDITIONS\r\n**\r\n** Name: BC-1 Type: Symmetry/Antisymmetry/Encastre\r\n*Boundary\r\nBOUNDARY, ENCASTRE\r\n**']);
        t=1;
        for i=1:numResidual
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 1,0,0\r\n**\r\n*END LOAD CASE\r\n**']);
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t+1),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 0,1,0\r\n**\r\n*END LOAD CASE\r\n**']);
            fprintf(fid,['\r\n* LOAD CASE, name=Load-',num2str(3*(k-1)*numLoadCase+t+2),' Type: Surface traction\r\n*Dsload, follower=NO,constant resultant=NO\r\nfacet',num2str(i+(k-1)*numLoadCase),', TRVEC, 1, 0,0,1\r\n**\r\n*END LOAD CASE\r\n**']);
            t=t+3;
        end
        fprintf(fid,['\r\n** OUTPUT REQUESTS\r\n*OUTPUT, HISTORY, Frequency=0\r\n*OUTPUT, FIELD, Frequency=0\r\n**\r\n*NODE PRINT, NSET=repNODES, SUMMARY=NO\r\nU1, U2, U3, COORD,\r\n**\r\n*END STEP\r\n**']);
    end
    fclose(fid);
end
